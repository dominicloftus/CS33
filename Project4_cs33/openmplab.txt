Dominic Loftus
204910863

1/
First I downloaded the openmplab.tgz file to my seasnet server and unzipped
the tar file.

Then I needed to determine the program's kernel that is taking up most of the
computation time.

I did this by using the command
make seq GPROF=1
which gave me a executable file called seq.

I then used the command
gprof seq | less
to open the gprof in the less view which produced the following
 %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 63.98      0.46     0.46       15    30.71    36.78  func1
 15.30      0.57     0.11  5177344     0.00     0.00  rand2
  9.74      0.64     0.07 67829762     0.00     0.00  round
  2.78      0.66     0.02                             sequence
  1.39      0.67     0.01   491520     0.00     0.00  findIndexBin
  1.39      0.68     0.01        2     5.01     5.01  init
  1.39      0.69     0.01        1    10.01    99.25  addSeed
  1.39      0.70     0.01        1    10.01    10.01  elapsed_time
  1.39      0.71     0.01        1    10.01    10.01  imdilateDisk
  1.39      0.72     0.01                             filter
  0.00      0.72     0.00       16     0.00     0.00  dilateMatrix
  0.00      0.72     0.00       15     0.00     0.00  func2
  0.00      0.72     0.00       15     0.00     0.00  func3
  0.00      0.72     0.00       15     0.00     0.00  func4
  0.00      0.72     0.00       15     0.00     0.67  func5
  0.00      0.72     0.00       15     0.00     0.00  rand1
  0.00      0.72     0.00        2     0.00     0.00  get_time
  0.00      0.72     0.00        1     0.00     0.00  fillMatrix
  0.00      0.72     0.00        1     0.00     0.00  func0
  0.00      0.72     0.00        1     0.00     0.00  getNeighbors


I found that the program was being held up in the function func1 that was
taking up 63.98 percent of the computation time. So this is where we
should spend time tuning. We could also look at improving func5 which used
.67ms/call however this is also not very much compared to func1.




2/
Next was to establish a base line to compare performance against
I used the commands
make seq
./seq
which output the following
FUNC TIME : 0.609978
TOTAL TIME : 2.612466
so we are trying to improve the function time.


3/
Now we need to implement the open mp multithreading to readuce the func time.
I did this by inserting
#pragma omp parallel for
before each for loop in func.c
with private(vars...) and reduction(+:vars...)
appended to the #pragma command when necessary


These changes sped up the function time greatly, past the 3.5 needed for the
spec.

I was looking for other ways to speed up the program and found that I
could eliminate two loops from the program by adding their contents into
another for loop in the function with same loop length, one loop from func1
and one from func2.

4/
Next was to measure the time of the new function with changes using commands
make clean
make omp
./omp
which output
FUNC TIME : 0.033058
TOTAL TIME : 1.896367

To measure the speed up we use T(original)/T(new)
0.609978/0.033058 = ~18.5
which is significant speedup

5/
Checking usage using gprof now gives the following
%   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 70.64      1.39     1.39                             filter
 20.84      1.80     0.41  1915395     0.00     0.00  func1
  3.56      1.87     0.07                             func3
  1.78      1.91     0.04        2    17.52    17.52  func4
  1.02      1.93     0.02                             imdilateDisk
  0.76      1.94     0.02  4238528     0.00     0.00  func2
  0.51      1.95     0.01   491520     0.00     0.00  sequence
  0.51      1.96     0.01        1    10.01    10.01  fillMatrix
  0.51      1.97     0.01        1    10.01    10.01  func5
  0.00      1.97     0.00       16     0.00     0.00  rand2
  0.00      1.97     0.00        1     0.00     0.00  addSeed
  0.00      1.97     0.00        1     0.00     0.00  rand1

and we can see that the functions now use less of the computational time by
percentage than before.

6/
Checking for correct output using
make check
gives the following
gcc -o omp  -O3 -fopenmp filter.c main.c func.c util.c -lm
cp omp filter
./filter
FUNC TIME : 0.034851
TOTAL TIME : 1.930223
diff --brief correct.txt output.txt

with no output from diff, so we have the correct output still


7/
To check for memory leaks I used the commands
make clean
make omp MTRACE=1
./omp
make checkmem

which output
mtrace filter mtrace.out || true
env: ‘./filter’: No such file or directory

Memory not freed:
-----------------
           Address     Size     Caller
addr2line: 'filter': No such file
0x000000000092a070     0xd0  at 
0x000000000092a150   0x12c0  at 
0x000000000092b420     0xc0  at 
addr2line: 'filter': No such file
0x000000000092b4f0     0x88  at 
addr2line: 'filter': No such file
0x000000000092b580    0x240  at 
0x000000000092b7d0    0x240  at 
0x000000000092ba20    0x240  at 
0x000000000092bc70    0x240  at 
0x000000000092bec0    0x240  at 
0x000000000092c110    0x240  at 
0x000000000092c360    0x240  at 
0x000000000092c5b0    0x240  at 
0x000000000092c800    0x240  at 
0x000000000092ca50    0x240  at 
0x000000000092cca0    0x240  at 
0x000000000092cef0    0x240  at 
0x000000000092d140    0x240  at 
0x000000000092d390    0x240  at 
0x000000000092d5e0    0x240  at

however according to a piazza post openmp has memory leaks by default
and that this is okay to have.
